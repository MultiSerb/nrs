char *p_ParametarFunkcije = (char*)malloc(sizeof(char)+2 * sizeof(int));//zauzimanje memorije za bafer
int *operand = (int *)(p_ParametarFunkcije + sizeof(char));//pristupamo pok+1 i on se pomera za int kad ga povecavamo ko niz
int n = *((int*) buffer);//vrednost
printf("pisemo neki tekst %f ",nekifloat);
scanf("%c", &operacija);//c-char,d-int,f-float,hu-short
free(p_ParametarFunkcije);//oslobadjamo mem od maloca

void copyToLE(unsigned x, void* copy){//copyToBE//ove f-je dele sa 100000000 stalno i tako dobija deo po deo broja po 4 cifre i uspisuje ga
   for(int i=0; i<sizeof(x); i++){//lE je kad prvo upisujes  sa desne-levu  a Be sa leva-desna
      *((char*)copy+i) = x%256;//copy+sizeof(x)-1-i ide od krja a ne do pocetka
      x = x/256;
   }
}


void copyLEToLE(unsigned x, void* copy){//samo prekucava redom brojeve a be menja prvo idu vise vaznosti pa manje....
   for(int i=0; i<sizeof(x); i++){
      *((char*)copy+i) = *((char *)&x +i);
   }			//*((char *)&x +sizeof(x)-1-i);//za BE
}

do {scnaf}//da ispisuje sve dok ne unese dobro...
while(uslov);

char* konverzija(int n){//predstava preko binarnog broj->string
   char s[33], *rez;
   s[32] = 0;
   int i = 31;
   do { 
     if (n%2==0)
        s[i] = '0';
     else
        s[i] = '1';
     i--;
     n = n/2;
   } while (n!=0);
   rez = (char *) malloc(32-i);
   memcpy(rez, &s[i+1], 32-i);
   return rez;
}
int konverzija(char *s){//string->16 osnova
   int rez, i;
   rez = 0;
   i = 0;
   while (s[i]!=0){
     if (s[i]>='0'&&s[i]<='9')
        rez = rez*16+s[i]-'0';
     else if (s[i]>='A'&&s[i]<='F')
        rez = rez*16+s[i]-'A'+10;
     else if (s[i]>='a'&&s[i]<='f')
        rez = rez*16+s[i]-'a'+10;
     else
        return -1;
     i++;
   }
   return rez;
}



#pragma pack(4)
typedef struct {
   char ime[12];
   char prezime[12];
   char pol;
   short danR, mesecR, godinaR;
   char JMBG[14];
} Osoba;

node *l;
 init(&l);//inc istu
  addEnd(l, st);//dodajemo neki el na kraj ovom slicaju strukturu
node *t = l->next;
    while (t!=l) {//ispis liste
        printf("%s\n", t->data.ime);
        printf("%s\n", t->data.prezime);
        printf("%s\n", t->data.brIndeksa);
        printf("%d\n", t->data.brIspita);
        t = t->next;
    }
typedef int provera(int);//def pok na f-ju kako izgleda
void bubbleSort(int a[], int n, poredjenje *uporedi) {
   int i, j, t;
   for (j=n-1; j>0; j--)
      for (i=0; i<j; i++)
        if ((*uporedi)(a[i+1], a[i])) {
            t = a[i];
            a[i] = a[i+1];
            a[i+1] = t;
        }
}